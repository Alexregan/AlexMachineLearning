{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Alexregan/AlexMachineLearning/blob/main/Assignment%203%20-%20Alex%20Regan\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "43554d37",
      "metadata": {
        "id": "43554d37"
      },
      "source": [
        "# Turing Machine and Deep Learning 2023\n",
        "\n",
        "## Assignment Unupervised ML\n",
        "\n",
        "This notebook is meant for you to review and reflect on the content of Lecture 3, which was mainly about unsupervised learning problems. As with last week, this notebook should not be too much quantitative work (lines of code) but keep in mind that running this notebook may take a longer time than you may be used to for python programs (*training good models take time!*)\n",
        "\n",
        "### Handing in your Assignment\n",
        "\n",
        "Git is an invaluable resource to researchers and developers, and thus for this course, all course material will be (additionally) shared on GitHub. Though there is a tiny bit of a learning curve, this is worth the effort. To hand in your assignment (applicable to all weeks):\n",
        "\n",
        "1. Create a folder called \"Week 2\" and copy this notebook and any other files or data that may be needed.\n",
        "2. Finish the notebook and commit and push regularly. Your final commit before the deadline will be graded.\n",
        "\n",
        "\n",
        "### Grading\n",
        "\n",
        "Each one of the (sub-)questions below will be graded either 0 (insufficient), 1 (sufficient) or 2 (good). If $N$ is the number of sub-questions, and $p_i$ is your score for sub-question $i$, your total grade $G$ for this assignment is:\n",
        "$$G=\\frac{1}{2 N}\\sum_{i=0}^{N}p_i$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "id": "52fbab8b",
      "metadata": {
        "id": "52fbab8b"
      },
      "outputs": [],
      "source": [
        "# load common libraries\n",
        "import numpy as np                 # maths\n",
        "import matplotlib.pyplot as plt    # plotting\n",
        "import pandas as pd                # data manipulation\n",
        "from tqdm import tqdm              # loading bar\n",
        "from time import perf_counter      # timer"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bf4c3a0a",
      "metadata": {
        "id": "bf4c3a0a"
      },
      "source": [
        "# Q1 Loading and preprocessing data\n",
        "\n",
        "In this repository, you should find a file called `tmdb_5000_movies.csv` which is information from a subset of movies on The Movie Database."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "40715541",
      "metadata": {
        "id": "40715541"
      },
      "source": [
        "### Q.1.1\n",
        "Use pandas to read in the csv file (refer to [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) if you're unfamiliar)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "c10a5202",
      "metadata": {
        "id": "c10a5202",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 786
        },
        "outputId": "0c786ed5-b20a-4857-9c2b-30432b282270"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ae391f74-0fba-4c7d-8d12-f917ef86d2ab\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ae391f74-0fba-4c7d-8d12-f917ef86d2ab\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving tmdb_5000_movies.csv to tmdb_5000_movies (3).csv\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      budget                                             genres  \\\n",
              "0  237000000  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...   \n",
              "1  300000000  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...   \n",
              "2  245000000  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...   \n",
              "3  250000000  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 80, \"nam...   \n",
              "4  260000000  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...   \n",
              "\n",
              "                                       homepage      id  \\\n",
              "0                   http://www.avatarmovie.com/   19995   \n",
              "1  http://disney.go.com/disneypictures/pirates/     285   \n",
              "2   http://www.sonypictures.com/movies/spectre/  206647   \n",
              "3            http://www.thedarkknightrises.com/   49026   \n",
              "4          http://movies.disney.com/john-carter   49529   \n",
              "\n",
              "                                            keywords original_language  \\\n",
              "0  [{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...                en   \n",
              "1  [{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...                en   \n",
              "2  [{\"id\": 470, \"name\": \"spy\"}, {\"id\": 818, \"name...                en   \n",
              "3  [{\"id\": 849, \"name\": \"dc comics\"}, {\"id\": 853,...                en   \n",
              "4  [{\"id\": 818, \"name\": \"based on novel\"}, {\"id\":...                en   \n",
              "\n",
              "                             original_title  \\\n",
              "0                                    Avatar   \n",
              "1  Pirates of the Caribbean: At World's End   \n",
              "2                                   Spectre   \n",
              "3                     The Dark Knight Rises   \n",
              "4                               John Carter   \n",
              "\n",
              "                                            overview  popularity  \\\n",
              "0  In the 22nd century, a paraplegic Marine is di...  150.437577   \n",
              "1  Captain Barbossa, long believed to be dead, ha...  139.082615   \n",
              "2  A cryptic message from Bond’s past sends him o...  107.376788   \n",
              "3  Following the death of District Attorney Harve...  112.312950   \n",
              "4  John Carter is a war-weary, former military ca...   43.926995   \n",
              "\n",
              "                                production_companies  \\\n",
              "0  [{\"name\": \"Ingenious Film Partners\", \"id\": 289...   \n",
              "1  [{\"name\": \"Walt Disney Pictures\", \"id\": 2}, {\"...   \n",
              "2  [{\"name\": \"Columbia Pictures\", \"id\": 5}, {\"nam...   \n",
              "3  [{\"name\": \"Legendary Pictures\", \"id\": 923}, {\"...   \n",
              "4        [{\"name\": \"Walt Disney Pictures\", \"id\": 2}]   \n",
              "\n",
              "                                production_countries release_date     revenue  \\\n",
              "0  [{\"iso_3166_1\": \"US\", \"name\": \"United States o...   2009-12-10  2787965087   \n",
              "1  [{\"iso_3166_1\": \"US\", \"name\": \"United States o...   2007-05-19   961000000   \n",
              "2  [{\"iso_3166_1\": \"GB\", \"name\": \"United Kingdom\"...   2015-10-26   880674609   \n",
              "3  [{\"iso_3166_1\": \"US\", \"name\": \"United States o...   2012-07-16  1084939099   \n",
              "4  [{\"iso_3166_1\": \"US\", \"name\": \"United States o...   2012-03-07   284139100   \n",
              "\n",
              "   runtime                                   spoken_languages    status  \\\n",
              "0    162.0  [{\"iso_639_1\": \"en\", \"name\": \"English\"}, {\"iso...  Released   \n",
              "1    169.0           [{\"iso_639_1\": \"en\", \"name\": \"English\"}]  Released   \n",
              "2    148.0  [{\"iso_639_1\": \"fr\", \"name\": \"Fran\\u00e7ais\"},...  Released   \n",
              "3    165.0           [{\"iso_639_1\": \"en\", \"name\": \"English\"}]  Released   \n",
              "4    132.0           [{\"iso_639_1\": \"en\", \"name\": \"English\"}]  Released   \n",
              "\n",
              "                                          tagline  \\\n",
              "0                     Enter the World of Pandora.   \n",
              "1  At the end of the world, the adventure begins.   \n",
              "2                           A Plan No One Escapes   \n",
              "3                                 The Legend Ends   \n",
              "4            Lost in our world, found in another.   \n",
              "\n",
              "                                      title  vote_average  vote_count  \n",
              "0                                    Avatar           7.2       11800  \n",
              "1  Pirates of the Caribbean: At World's End           6.9        4500  \n",
              "2                                   Spectre           6.3        4466  \n",
              "3                     The Dark Knight Rises           7.6        9106  \n",
              "4                               John Carter           6.1        2124  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cea85d4e-2b8d-4885-9acd-d62108902b4c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>budget</th>\n",
              "      <th>genres</th>\n",
              "      <th>homepage</th>\n",
              "      <th>id</th>\n",
              "      <th>keywords</th>\n",
              "      <th>original_language</th>\n",
              "      <th>original_title</th>\n",
              "      <th>overview</th>\n",
              "      <th>popularity</th>\n",
              "      <th>production_companies</th>\n",
              "      <th>production_countries</th>\n",
              "      <th>release_date</th>\n",
              "      <th>revenue</th>\n",
              "      <th>runtime</th>\n",
              "      <th>spoken_languages</th>\n",
              "      <th>status</th>\n",
              "      <th>tagline</th>\n",
              "      <th>title</th>\n",
              "      <th>vote_average</th>\n",
              "      <th>vote_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>237000000</td>\n",
              "      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...</td>\n",
              "      <td>http://www.avatarmovie.com/</td>\n",
              "      <td>19995</td>\n",
              "      <td>[{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...</td>\n",
              "      <td>en</td>\n",
              "      <td>Avatar</td>\n",
              "      <td>In the 22nd century, a paraplegic Marine is di...</td>\n",
              "      <td>150.437577</td>\n",
              "      <td>[{\"name\": \"Ingenious Film Partners\", \"id\": 289...</td>\n",
              "      <td>[{\"iso_3166_1\": \"US\", \"name\": \"United States o...</td>\n",
              "      <td>2009-12-10</td>\n",
              "      <td>2787965087</td>\n",
              "      <td>162.0</td>\n",
              "      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}, {\"iso...</td>\n",
              "      <td>Released</td>\n",
              "      <td>Enter the World of Pandora.</td>\n",
              "      <td>Avatar</td>\n",
              "      <td>7.2</td>\n",
              "      <td>11800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>300000000</td>\n",
              "      <td>[{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...</td>\n",
              "      <td>http://disney.go.com/disneypictures/pirates/</td>\n",
              "      <td>285</td>\n",
              "      <td>[{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...</td>\n",
              "      <td>en</td>\n",
              "      <td>Pirates of the Caribbean: At World's End</td>\n",
              "      <td>Captain Barbossa, long believed to be dead, ha...</td>\n",
              "      <td>139.082615</td>\n",
              "      <td>[{\"name\": \"Walt Disney Pictures\", \"id\": 2}, {\"...</td>\n",
              "      <td>[{\"iso_3166_1\": \"US\", \"name\": \"United States o...</td>\n",
              "      <td>2007-05-19</td>\n",
              "      <td>961000000</td>\n",
              "      <td>169.0</td>\n",
              "      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}]</td>\n",
              "      <td>Released</td>\n",
              "      <td>At the end of the world, the adventure begins.</td>\n",
              "      <td>Pirates of the Caribbean: At World's End</td>\n",
              "      <td>6.9</td>\n",
              "      <td>4500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>245000000</td>\n",
              "      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...</td>\n",
              "      <td>http://www.sonypictures.com/movies/spectre/</td>\n",
              "      <td>206647</td>\n",
              "      <td>[{\"id\": 470, \"name\": \"spy\"}, {\"id\": 818, \"name...</td>\n",
              "      <td>en</td>\n",
              "      <td>Spectre</td>\n",
              "      <td>A cryptic message from Bond’s past sends him o...</td>\n",
              "      <td>107.376788</td>\n",
              "      <td>[{\"name\": \"Columbia Pictures\", \"id\": 5}, {\"nam...</td>\n",
              "      <td>[{\"iso_3166_1\": \"GB\", \"name\": \"United Kingdom\"...</td>\n",
              "      <td>2015-10-26</td>\n",
              "      <td>880674609</td>\n",
              "      <td>148.0</td>\n",
              "      <td>[{\"iso_639_1\": \"fr\", \"name\": \"Fran\\u00e7ais\"},...</td>\n",
              "      <td>Released</td>\n",
              "      <td>A Plan No One Escapes</td>\n",
              "      <td>Spectre</td>\n",
              "      <td>6.3</td>\n",
              "      <td>4466</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>250000000</td>\n",
              "      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 80, \"nam...</td>\n",
              "      <td>http://www.thedarkknightrises.com/</td>\n",
              "      <td>49026</td>\n",
              "      <td>[{\"id\": 849, \"name\": \"dc comics\"}, {\"id\": 853,...</td>\n",
              "      <td>en</td>\n",
              "      <td>The Dark Knight Rises</td>\n",
              "      <td>Following the death of District Attorney Harve...</td>\n",
              "      <td>112.312950</td>\n",
              "      <td>[{\"name\": \"Legendary Pictures\", \"id\": 923}, {\"...</td>\n",
              "      <td>[{\"iso_3166_1\": \"US\", \"name\": \"United States o...</td>\n",
              "      <td>2012-07-16</td>\n",
              "      <td>1084939099</td>\n",
              "      <td>165.0</td>\n",
              "      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}]</td>\n",
              "      <td>Released</td>\n",
              "      <td>The Legend Ends</td>\n",
              "      <td>The Dark Knight Rises</td>\n",
              "      <td>7.6</td>\n",
              "      <td>9106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>260000000</td>\n",
              "      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...</td>\n",
              "      <td>http://movies.disney.com/john-carter</td>\n",
              "      <td>49529</td>\n",
              "      <td>[{\"id\": 818, \"name\": \"based on novel\"}, {\"id\":...</td>\n",
              "      <td>en</td>\n",
              "      <td>John Carter</td>\n",
              "      <td>John Carter is a war-weary, former military ca...</td>\n",
              "      <td>43.926995</td>\n",
              "      <td>[{\"name\": \"Walt Disney Pictures\", \"id\": 2}]</td>\n",
              "      <td>[{\"iso_3166_1\": \"US\", \"name\": \"United States o...</td>\n",
              "      <td>2012-03-07</td>\n",
              "      <td>284139100</td>\n",
              "      <td>132.0</td>\n",
              "      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}]</td>\n",
              "      <td>Released</td>\n",
              "      <td>Lost in our world, found in another.</td>\n",
              "      <td>John Carter</td>\n",
              "      <td>6.1</td>\n",
              "      <td>2124</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cea85d4e-2b8d-4885-9acd-d62108902b4c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cea85d4e-2b8d-4885-9acd-d62108902b4c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cea85d4e-2b8d-4885-9acd-d62108902b4c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3b3d6262-c12a-44c3-a53d-29a51f2455f5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3b3d6262-c12a-44c3-a53d-29a51f2455f5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3b3d6262-c12a-44c3-a53d-29a51f2455f5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4803,\n  \"fields\": [\n    {\n      \"column\": \"budget\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40722391,\n        \"min\": 0,\n        \"max\": 380000000,\n        \"num_unique_values\": 436,\n        \"samples\": [\n          439000,\n          68000000,\n          700000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genres\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1175,\n        \"samples\": [\n          \"[{\\\"id\\\": 14, \\\"name\\\": \\\"Fantasy\\\"}, {\\\"id\\\": 12, \\\"name\\\": \\\"Adventure\\\"}, {\\\"id\\\": 16, \\\"name\\\": \\\"Animation\\\"}]\",\n          \"[{\\\"id\\\": 28, \\\"name\\\": \\\"Action\\\"}, {\\\"id\\\": 35, \\\"name\\\": \\\"Comedy\\\"}, {\\\"id\\\": 80, \\\"name\\\": \\\"Crime\\\"}, {\\\"id\\\": 18, \\\"name\\\": \\\"Drama\\\"}]\",\n          \"[{\\\"id\\\": 12, \\\"name\\\": \\\"Adventure\\\"}, {\\\"id\\\": 16, \\\"name\\\": \\\"Animation\\\"}, {\\\"id\\\": 10751, \\\"name\\\": \\\"Family\\\"}, {\\\"id\\\": 14, \\\"name\\\": \\\"Fantasy\\\"}, {\\\"id\\\": 878, \\\"name\\\": \\\"Science Fiction\\\"}]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"homepage\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1691,\n        \"samples\": [\n          \"https://www.warnerbros.com/running-scared\",\n          \"http://www.51birchstreet.com/index.php\",\n          \"http://movies2.foxjapan.com/glee/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88694,\n        \"min\": 5,\n        \"max\": 459488,\n        \"num_unique_values\": 4803,\n        \"samples\": [\n          8427,\n          13006,\n          18041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"keywords\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4222,\n        \"samples\": [\n          \"[{\\\"id\\\": 782, \\\"name\\\": \\\"assassin\\\"}, {\\\"id\\\": 1872, \\\"name\\\": \\\"loss of father\\\"}, {\\\"id\\\": 2908, \\\"name\\\": \\\"secret society\\\"}, {\\\"id\\\": 3045, \\\"name\\\": \\\"mission of murder\\\"}, {\\\"id\\\": 9748, \\\"name\\\": \\\"revenge\\\"}]\",\n          \"[{\\\"id\\\": 2987, \\\"name\\\": \\\"gang war\\\"}, {\\\"id\\\": 4942, \\\"name\\\": \\\"victim of murder\\\"}, {\\\"id\\\": 5332, \\\"name\\\": \\\"greed\\\"}, {\\\"id\\\": 6062, \\\"name\\\": \\\"hostility\\\"}, {\\\"id\\\": 156212, \\\"name\\\": \\\"spaghetti western\\\"}]\",\n          \"[{\\\"id\\\": 703, \\\"name\\\": \\\"detective\\\"}, {\\\"id\\\": 1299, \\\"name\\\": \\\"monster\\\"}, {\\\"id\\\": 6101, \\\"name\\\": \\\"engine\\\"}, {\\\"id\\\": 10988, \\\"name\\\": \\\"based on tv series\\\"}, {\\\"id\\\": 15162, \\\"name\\\": \\\"dog\\\"}]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"original_language\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 37,\n        \"samples\": [\n          \"xx\",\n          \"ta\",\n          \"es\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"original_title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4801,\n        \"samples\": [\n          \"I Spy\",\n          \"Love Letters\",\n          \"Sleepover\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"overview\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4800,\n        \"samples\": [\n          \"When the Switchblade, the most sophisticated prototype stealth fighter created yet, is stolen from the U.S. government, one of the United States' top spies, Alex Scott, is called to action. What he doesn't expect is to get teamed up with a cocky civilian, World Class Boxing Champion Kelly Robinson, on a dangerous top secret espionage mission. Their assignment: using equal parts skill and humor, catch Arnold Gundars, one of the world's most successful arms dealers.\",\n          \"When \\\"street smart\\\" rapper Christopher \\\"C-Note\\\" Hawkins (Big Boi) applies for a membership to all-white Carolina Pines Country Club, the establishment's proprietors are hardly ready to oblige him.\",\n          \"As their first year of high school looms ahead, best friends Julie, Hannah, Yancy and Farrah have one last summer sleepover. Little do they know they're about to embark on the adventure of a lifetime. Desperate to shed their nerdy status, they take part in a night-long scavenger hunt that pits them against their popular archrivals. Everything under the sun goes on -- from taking Yancy's father's car to sneaking into nightclubs!\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"popularity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.816649749537806,\n        \"min\": 0.0,\n        \"max\": 875.581305,\n        \"num_unique_values\": 4802,\n        \"samples\": [\n          13.267631,\n          0.010909,\n          5.842299\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"production_companies\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3697,\n        \"samples\": [\n          \"[{\\\"name\\\": \\\"Paramount Pictures\\\", \\\"id\\\": 4}, {\\\"name\\\": \\\"Cherry Alley Productions\\\", \\\"id\\\": 2232}]\",\n          \"[{\\\"name\\\": \\\"Twentieth Century Fox Film Corporation\\\", \\\"id\\\": 306}, {\\\"name\\\": \\\"Dune Entertainment\\\", \\\"id\\\": 444}, {\\\"name\\\": \\\"Regency Enterprises\\\", \\\"id\\\": 508}, {\\\"name\\\": \\\"Guy Walks into a Bar Productions\\\", \\\"id\\\": 2645}, {\\\"name\\\": \\\"Deep River Productions\\\", \\\"id\\\": 2646}, {\\\"name\\\": \\\"Friendly Films (II)\\\", \\\"id\\\": 81136}]\",\n          \"[{\\\"name\\\": \\\"Twentieth Century Fox Film Corporation\\\", \\\"id\\\": 306}]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"production_countries\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 469,\n        \"samples\": [\n          \"[{\\\"iso_3166_1\\\": \\\"ES\\\", \\\"name\\\": \\\"Spain\\\"}, {\\\"iso_3166_1\\\": \\\"GB\\\", \\\"name\\\": \\\"United Kingdom\\\"}, {\\\"iso_3166_1\\\": \\\"US\\\", \\\"name\\\": \\\"United States of America\\\"}, {\\\"iso_3166_1\\\": \\\"FR\\\", \\\"name\\\": \\\"France\\\"}]\",\n          \"[{\\\"iso_3166_1\\\": \\\"US\\\", \\\"name\\\": \\\"United States of America\\\"}, {\\\"iso_3166_1\\\": \\\"CA\\\", \\\"name\\\": \\\"Canada\\\"}, {\\\"iso_3166_1\\\": \\\"DE\\\", \\\"name\\\": \\\"Germany\\\"}]\",\n          \"[{\\\"iso_3166_1\\\": \\\"DE\\\", \\\"name\\\": \\\"Germany\\\"}, {\\\"iso_3166_1\\\": \\\"ES\\\", \\\"name\\\": \\\"Spain\\\"}, {\\\"iso_3166_1\\\": \\\"GB\\\", \\\"name\\\": \\\"United Kingdom\\\"}, {\\\"iso_3166_1\\\": \\\"US\\\", \\\"name\\\": \\\"United States of America\\\"}]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 3280,\n        \"samples\": [\n          \"1966-10-16\",\n          \"1987-07-31\",\n          \"1993-09-23\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"revenue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 162857100,\n        \"min\": 0,\n        \"max\": 2787965087,\n        \"num_unique_values\": 3297,\n        \"samples\": [\n          11833696,\n          10462500,\n          17807569\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"runtime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.611934588844207,\n        \"min\": 0.0,\n        \"max\": 338.0,\n        \"num_unique_values\": 156,\n        \"samples\": [\n          74.0,\n          85.0,\n          170.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"spoken_languages\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 544,\n        \"samples\": [\n          \"[{\\\"iso_639_1\\\": \\\"es\\\", \\\"name\\\": \\\"Espa\\\\u00f1ol\\\"}, {\\\"iso_639_1\\\": \\\"en\\\", \\\"name\\\": \\\"English\\\"}, {\\\"iso_639_1\\\": \\\"fr\\\", \\\"name\\\": \\\"Fran\\\\u00e7ais\\\"}, {\\\"iso_639_1\\\": \\\"hu\\\", \\\"name\\\": \\\"Magyar\\\"}]\",\n          \"[{\\\"iso_639_1\\\": \\\"en\\\", \\\"name\\\": \\\"English\\\"}, {\\\"iso_639_1\\\": \\\"it\\\", \\\"name\\\": \\\"Italiano\\\"}, {\\\"iso_639_1\\\": \\\"pt\\\", \\\"name\\\": \\\"Portugu\\\\u00eas\\\"}]\",\n          \"[{\\\"iso_639_1\\\": \\\"de\\\", \\\"name\\\": \\\"Deutsch\\\"}, {\\\"iso_639_1\\\": \\\"it\\\", \\\"name\\\": \\\"Italiano\\\"}, {\\\"iso_639_1\\\": \\\"la\\\", \\\"name\\\": \\\"Latin\\\"}, {\\\"iso_639_1\\\": \\\"pl\\\", \\\"name\\\": \\\"Polski\\\"}]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Released\",\n          \"Post Production\",\n          \"Rumored\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tagline\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3944,\n        \"samples\": [\n          \"When you're 17, every day is war.\",\n          \"An Unspeakable Horror. A Creative Genius. Captured For Eternity.\",\n          \"May the schwartz be with you\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4800,\n        \"samples\": [\n          \"I Spy\",\n          \"Who's Your Caddy?\",\n          \"Sleepover\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vote_average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1946121628478925,\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 71,\n        \"samples\": [\n          5.1,\n          7.2,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vote_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1234,\n        \"min\": 0,\n        \"max\": 13752,\n        \"num_unique_values\": 1609,\n        \"samples\": [\n          7604,\n          3428,\n          225\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()  # This will prompt you to select a file\n",
        "df = pd.read_csv(\"tmdb_5000_movies.csv\")\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1915f1f7",
      "metadata": {
        "id": "1915f1f7"
      },
      "source": [
        "View information about the dataset including datatypes and null values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "c173d066",
      "metadata": {
        "id": "c173d066",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6bb72923-32be-4d62-bfdd-0a73f9581d28"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4803 entries, 0 to 4802\n",
            "Data columns (total 20 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   budget                4803 non-null   int64  \n",
            " 1   genres                4803 non-null   object \n",
            " 2   homepage              1712 non-null   object \n",
            " 3   id                    4803 non-null   int64  \n",
            " 4   keywords              4803 non-null   object \n",
            " 5   original_language     4803 non-null   object \n",
            " 6   original_title        4803 non-null   object \n",
            " 7   overview              4800 non-null   object \n",
            " 8   popularity            4803 non-null   float64\n",
            " 9   production_companies  4803 non-null   object \n",
            " 10  production_countries  4803 non-null   object \n",
            " 11  release_date          4802 non-null   object \n",
            " 12  revenue               4803 non-null   int64  \n",
            " 13  runtime               4801 non-null   float64\n",
            " 14  spoken_languages      4803 non-null   object \n",
            " 15  status                4803 non-null   object \n",
            " 16  tagline               3959 non-null   object \n",
            " 17  title                 4803 non-null   object \n",
            " 18  vote_average          4803 non-null   float64\n",
            " 19  vote_count            4803 non-null   int64  \n",
            "dtypes: float64(3), int64(4), object(13)\n",
            "memory usage: 750.6+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4e64a24f",
      "metadata": {
        "id": "4e64a24f"
      },
      "source": [
        "**Q.1.1.2** What columns have null values above? How would you be able to estimate the missing values?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2660fe51",
      "metadata": {
        "id": "2660fe51"
      },
      "source": [
        "tagline, runtime, release_date, overview, homepage. Since there are 4803 entries, but these ones have a lower amount of entries, this must mean that there are null values. You could estimate the missing values by replacing the epmty with \"\" and Unknow with text."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "83863820",
      "metadata": {
        "id": "83863820"
      },
      "source": [
        "### Q1.2\n",
        "For this notebook, we're only interested in a few columns, specifically title, overview and genres. Set df to only contain those columns."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "4e3f0439",
      "metadata": {
        "id": "4e3f0439",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01a90945-8a03-4357-d1a0-8288b1257867"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4803 entries, 0 to 4802\n",
            "Data columns (total 3 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   title     4803 non-null   object\n",
            " 1   overview  4800 non-null   object\n",
            " 2   genres    4803 non-null   object\n",
            "dtypes: object(3)\n",
            "memory usage: 112.7+ KB\n"
          ]
        }
      ],
      "source": [
        "df = df[['title', 'overview', 'genres']]\n",
        "df.info() # print out df info to verify"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b596e86b",
      "metadata": {
        "id": "b596e86b"
      },
      "source": [
        "### Q1.3\n",
        "We see that some movies do not have an overview. Drop them from the table and reset the index (set `drop=True`)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "a06e4f6a",
      "metadata": {
        "id": "a06e4f6a"
      },
      "outputs": [],
      "source": [
        "df = df.dropna(subset=['overview']).reset_index(drop=True) # drop na values and reset index\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "759df3a2",
      "metadata": {
        "id": "759df3a2"
      },
      "source": [
        "# Q2 One-hot encodings\n",
        "The following code processes the genres (which you see above are list of dictionaries) and encodes them into one-hot labels.\n",
        "\n",
        "Remember, since we cannot do maths on text strings, we must change these words to numbers. Here, we create one-hot encodings for the genres. Assume we have three genres $[G_1, G_2, G_3]$. If a movie $M_1$ is tagged with genre $G_1$, the encoding is $[1,0,0]$. If another movie $M_2$ is tagged with $G2$, the encoding becomes $[0,1,0]$. Other encodings are possible as well, but one-hot encoding quite common and useful for many other tasks. In this case, if a movie is tagged with more than one genre, we'll just take a random one and encode that into a one-hot label.\n",
        "\n",
        "### Q2.1 Processing genres\n",
        "\n",
        "Finish the following code that processes genres into one-hot encodings."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "dba05feb",
      "metadata": {
        "id": "dba05feb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d4625241-fbae-4f3f-a20b-8a601679f690"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 4800/4800 [00:00<00:00, 20711.76it/s]\n"
          ]
        }
      ],
      "source": [
        "np.random.seed(0)\n",
        "\n",
        "def process_genre_string(gs):\n",
        "    \"\"\" Processes genres into a single item from a list\"\"\"\n",
        "    gs = eval(gs)\n",
        "    gs = [x['name'] for x in gs]\n",
        "    genre = \"Unknown\"\n",
        "    if gs:\n",
        "        genre = np.random.choice(gs) # choose random entry\n",
        "    return genre\n",
        "\n",
        "# TODO: Fill in\n",
        "def encode_labels(label, unique_labels):\n",
        "    \"\"\" Encodes text labels into a one-hot encoded list\n",
        "        with possibly more than one one-hot per list.\n",
        "        :param label: the label you want to one-hot encode\n",
        "        :unique_labels: the vocabulary\n",
        "    \"\"\"\n",
        "    out = np.zeros(len(unique_labels))\n",
        "    out[unique_labels.index(label)] = 1\n",
        "    return out\n",
        "\n",
        "# save genres\n",
        "processed_genres = []\n",
        "for index, row in df.iterrows():\n",
        "    processed_genres.append(process_genre_string(row['genres']))\n",
        "\n",
        "# sort and remove duplicates to get vocabulary\n",
        "unique_genres = sorted(list(set(processed_genres)))\n",
        "\n",
        "# add to dataframe as new column\n",
        "df[\"proc_genres\"] = processed_genres\n",
        "\n",
        "# one-hot encode genres\n",
        "encoded_labels = []\n",
        "for index, row in tqdm(df.iterrows(), total=len(df)):\n",
        "    encoded_labels.append(encode_labels(row['proc_genres'], unique_genres))\n",
        "\n",
        "df[\"one_hot_genres\"] = encoded_labels"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d17501a9",
      "metadata": {
        "id": "d17501a9"
      },
      "source": [
        "Verify that one-hot encodings are indeed as expected"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "3b64854b",
      "metadata": {
        "id": "3b64854b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3738ee91-b227-482a-9927-3ae14e0d156e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "       0., 0., 0., 0.])"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "df[\"one_hot_genres\"][0]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b0a83ece",
      "metadata": {
        "id": "b0a83ece"
      },
      "source": [
        "### Q2.2 Processing Overviews\n",
        "Next, we process the overviews. First, we remove all punctuation for the sake of simplicity and change each overview to use only lowercase. Then we need to see how long the overviews are in terms of numbers of words. We can do this with a histogram.\n",
        "\n",
        "**Q2.2.1** Finish the following code"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "bfd51c53",
      "metadata": {
        "id": "bfd51c53",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "outputId": "0baa033e-83b8-482e-c82c-28c1452be96a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import re\n",
        "def remove_punctuation(text):\n",
        "    \"\"\" Only retains letters, numbers, underscores and whitespace \"\"\"\n",
        "    pattern = r'[^\\w\\s]'\n",
        "    return re.sub(pattern, '', text)\n",
        "\n",
        "processed_overviews = []\n",
        "\n",
        "# loop over df, remove punctuation, make words lowercase and add it to a new column\n",
        "for index, row in df.iterrows():\n",
        "    cleaned_text = remove_punctuation(row['overview']).lower()\n",
        "    processed_overviews.append(cleaned_text)\n",
        "df[\"proc_overview\"] = processed_overviews\n",
        "\n",
        "# get the word lengths of each overview and store it in a list\n",
        "overview_lens = []\n",
        "for overview in df['proc_overview']:\n",
        "    word_count = len(overview.split())\n",
        "    overview_lens.append(word_count)\n",
        "\n",
        "# for the sake of simplicity, add these values as a column to the df\n",
        "df[\"overview_len\"] = overview_lens\n",
        "plt.hist(df['overview_len'], bins=30)\n",
        "plt.xlabel('# of words')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "58138594",
      "metadata": {
        "id": "58138594"
      },
      "source": [
        "**Q2.2.2** What is the shortest overview? What is the longest? In the next step, we need to decide on a standard length of all overviews -- this means dropping overviews less than some value, and truncating longer ones. What length would you choose to minimize the number of movies dropped and maximize the information (words) stored in the overviews?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3b87f1af",
      "metadata": {
        "id": "3b87f1af"
      },
      "source": [
        "The shortest overview is 0 whereas the highest is close to 175. We could drop overviews less than 10 since there are not many here and most overviews start after this number. For the maximum, I would choose near the peek of the distribution, around 75 words idealy."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "54e6cb90",
      "metadata": {
        "id": "54e6cb90"
      },
      "source": [
        "### Q2.2.3\n",
        "Let's choose overviews of length 15 words. What this means is we need to discard movies that have overviews less than 15 (there are other ways of dealing with it, but this should be fine for now) and truncate the higher ones to the first 15 words."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "70854211",
      "metadata": {
        "id": "70854211",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e91fbcae-3fd9-43f7-9620-00383977fc49"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Remaining movies: 4707\n",
            "\n",
            "Sample processed overviews:\n",
            "                                      title  \\\n",
            "0                                    Avatar   \n",
            "1  Pirates of the Caribbean: At World's End   \n",
            "2                                   Spectre   \n",
            "3                     The Dark Knight Rises   \n",
            "4                               John Carter   \n",
            "\n",
            "                                       proc_overview  overview_len  \n",
            "0  in the 22nd century a paraplegic marine is dis...            28  \n",
            "1  captain barbossa long believed to be dead has ...            34  \n",
            "2  a cryptic message from bonds past sends him on...            41  \n",
            "3  following the death of district attorney harve...            65  \n",
            "4  john carter is a warweary former military capt...            55  \n"
          ]
        }
      ],
      "source": [
        "token_len = 15 # number of words\n",
        "# only select rows where overview len is more than or equal to token_len\n",
        "df = df[df['overview_len'] >= token_len]\n",
        "\n",
        "# split each proc_overview into a list of words, select the first token_len words,\n",
        "# and add the list of words back into df[\"proc_overview\"]\n",
        "df[\"proc_overview\"] = df[\"proc_overview\"].apply(\n",
        "    lambda x: ' '.join(x.split()[:token_len])\n",
        ")\n",
        "\n",
        "\n",
        "# print to verify\n",
        "print(f\"Remaining movies: {len(df)}\")\n",
        "print(\"\\nSample processed overviews:\")\n",
        "print(df[['title', 'proc_overview', 'overview_len']].head())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "26e092dd",
      "metadata": {
        "id": "26e092dd"
      },
      "source": [
        "### Q2.2.3 Finding the vocabulary length\n",
        "\n",
        "In order to one-hot encode words, we need to find how many words there are in total, just like in the case of genres. Get all the words, remove duplicates, and sort. Find and print the length of your vocabulary."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "a71a750b",
      "metadata": {
        "id": "a71a750b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "67970e1e-9ad8-4aec-b379-34b696f252a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12493\n"
          ]
        }
      ],
      "source": [
        "# hint: store all words for all movies in a set, change it to a list and sort\n",
        "all_words = set()\n",
        "for overview in df['proc_overview']:\n",
        "    words = overview.split()\n",
        "    all_words.update(words)\n",
        "\n",
        "vocabulary = sorted(list(all_words))\n",
        "vocab_len = len(vocabulary)\n",
        "print(vocab_len)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f276b825",
      "metadata": {
        "id": "f276b825"
      },
      "source": [
        "### Q2.2.4 Encoding the labels\n",
        "\n",
        "In the case of genres, we one-hot encoded the outputs by taking a single random genre. However, an alternative method is to add up the one-hot encodings to form some kind of histogram. For example, if we have an overview \"a brown dog\", and our vocab is \\[a brown, big, cabbage, dog, goat, cow, turkey\\], the one-hot vector would be \\[1,1,0,0,1,0,0,0\\]. If our overview is \"a big brown dog\", the one-hot vector would be \\[1,1,1,0,1,0,0,0\\]. If our overview is \"a big big brown dog\", the one-hot vector would be \\[1,1,2,0,1,0,0,0\\]. You can use the `encode_labels` function that you defined earlier."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "d212192f",
      "metadata": {
        "id": "d212192f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "outputId": "9dcd4544-48b3-44ff-ebc9-ead5fdb8153a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 4707/4707 [00:20<00:00, 232.63it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "1       [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "2       [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "3       [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "4       [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "                              ...                        \n",
              "4794    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "4795    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "4797    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "4798    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "4799    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...\n",
              "Name: one_hot_overview, Length: 4707, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>one_hot_overview</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4794</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4795</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4797</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4798</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4799</th>\n",
              "      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4707 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "# this code is just a hint, if you want you can do it as you please\n",
        "# as long as the output remains the same\n",
        "all_words = set(word for overview in df['proc_overview'] for word in overview.split())\n",
        "vocabulary = sorted(list(all_words))\n",
        "\n",
        "def encode_word(word, vocab):\n",
        "    \"\"\" One-hot encodes a single word \"\"\"\n",
        "    vec = np.zeros(len(vocab))\n",
        "    if word in vocab:\n",
        "        vec[vocab.index(word)] = 1\n",
        "    return vec\n",
        "encoded_labels = []\n",
        "for index, row in tqdm(df.iterrows(), total=len(df)):\n",
        "    sentence_encode = np.zeros(len(vocabulary))\n",
        "    for word in row[\"proc_overview\"].split():\n",
        "        sentence_encode += encode_word(word, vocabulary)\n",
        "    encoded_labels.append(sentence_encode)\n",
        "\n",
        "df[\"one_hot_overview\"] = encoded_labels\n",
        "df['one_hot_overview'] # print to verify"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7c62e127",
      "metadata": {
        "id": "7c62e127"
      },
      "source": [
        "**Q2.2.5** Each vector is a vector of floating point (64-bit) numbers. Assuming each float takes up exactly 16-bytes, how many bytes does this take to store (theoretically)?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "193b8235",
      "metadata": {
        "id": "193b8235"
      },
      "source": [
        "Theoretically, it would be the number of movies * vocabulary size * 16 bytes, this means there would be 4708 times 10000 times 16 = 753280000 bytes"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1f3b3700",
      "metadata": {
        "id": "1f3b3700"
      },
      "source": [
        "# Q3 Principal Component Analysis\n",
        "\n",
        "**Q3.1** Using the overview encoded into one-hot encodings, perform PCA and plot this into a 2-D image as a scatter plot."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "832f2be7",
      "metadata": {
        "id": "832f2be7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "8a28dff4-fb71-4e19-c123-b237ecf55748"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# import PCA decomposition class from sklearn\n",
        "from sklearn.decomposition import PCA\n",
        "X = np.stack(df['one_hot_overview'].values)\n",
        "pca = PCA(n_components=2)\n",
        "X_pca = pca.fit_transform(X)\n",
        "\n",
        "plt.figure(figsize=(15, 5))\n",
        "for i, component in enumerate(pca.components_[:2]):  # First 2 components\n",
        "    plt.subplot(1, 2, i+1)\n",
        "    top_word_indices = np.argsort(component)[-20:]\n",
        "    top_words = [vocabulary[idx] for idx in top_word_indices]\n",
        "    top_weights = component[top_word_indices]\n",
        "    plt.barh(top_words, top_weights)\n",
        "    plt.title(f'PC{i+1} - Most Important Words')\n",
        "    plt.tight_layout()\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "scatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], alpha=0.5)\n",
        "\n",
        "if 'proc_genres' in df.columns:\n",
        "    unique_genres = df['proc_genres'].unique()\n",
        "    genre_to_color = {g:i for i,g in enumerate(unique_genres)}\n",
        "    colors = [genre_to_color[g] for g in df['proc_genres']]\n",
        "    plt.scatter(X_pca[:, 0], X_pca[:, 1], c=colors, alpha=0.5, cmap='tab20')\n",
        "    plt.colorbar(label='Genres')\n",
        "\n",
        "plt.title('Movie Overviews in 2D PCA Space')\n",
        "plt.xlabel('Principal Component 1')\n",
        "plt.ylabel('Principal Component 2')\n",
        "plt.show()\n",
        "# we did exactly this in the lecture notebook"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a63054b6",
      "metadata": {
        "id": "a63054b6"
      },
      "source": [
        "**Q3.2** Do you see any interpretable structure in the above plot (\"interpretable\" $\\rightarrow$ the patterns are explainable)."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a9409e7b",
      "metadata": {
        "id": "a9409e7b"
      },
      "source": [
        "Not exactly, there seem to be clusters here and there but all with different movie genres so there is no clear trend."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4482c5e5",
      "metadata": {
        "id": "4482c5e5"
      },
      "source": [
        "**Q3.3** Quantify how much variance information a 2D PCA projection loses for this dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2338a25d",
      "metadata": {
        "id": "2338a25d"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "7da99ba5",
      "metadata": {
        "id": "7da99ba5"
      },
      "source": [
        "**Q3.4** Plot a line graph where the y-axis is cumulative explained variance ratio and the x-axis is the number of PCA components."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "e0cac8ff",
      "metadata": {
        "scrolled": false,
        "id": "e0cac8ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "db004766-3623-4a37-e5dc-f9818a970efa"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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lD0shmFQUOKZGW/9vW3VdkXCpZdeypQpU7jlllvYsmULv/zyC9OnT+ftt992mYjv1Vdf5fbbb2fDhg189913TJo0ifbt23PnnXdWuF+r1crChQuJioril19+YfLkyTz88MO8+OLpf6D37NnDe++9x4cffsjvv//OTTfdxNy5c3niiScAc7K/f//73yxZsoQuXbrw5Zdf8sc//pHWrVszZMgQ9u/fz3XXXcc999zDpEmT+O6773jwwQfP+P3HjRvHjTfeSG5urnPCr08//ZT8/HyuvfZaAPLy8khISKB3797k5uYyY8YMrr32WjZv3uxy5djUqVOZP38+ffv2xc/Pj08//dTls3Jzc7nqqqt44okn8PX15bXXXmPEiBHs3LmT9u3bO9vNnz+fOXPm8Oijj/LOO+9w9913M2TIELp160Zubi5Dhgyhbdu2fPDBB4SGhrJp0ybnpf5fffUV48ePZ+HChQwePJg9e/YwadIkAGbOnHnGYyEiUqHifDiyEzJ3wOHt5c9Zqa7t2vaH2MmeqbGSGmVgKSix02PGp2dvWAN++ls8TXwqf9g//PDDU2bffPTRR3n00UcBePzxx1m1ahWTJk1i27ZtTJgwgWuuucalfUREBM899xwWi4Vu3bqxdetWnnvuudMGlhPHskRGRvL444/zpz/96YyBxeFwsGzZMpo3bw7ALbfcQnJyMk888QRFRUU8+eSTfP75585L1Tt27MjXX3/NSy+9xJAhQ1i8eDGdOnVi/vz5AM46n3rqqdN+Znx8PE2bNmXlypXccsstALz55ptcc801zjquv/56l/e88sortG7dmp9++umUK9Wuu+66035Wnz596NOnj/P1nDlzWLlyJR988AH33nuvc/1VV13F5Mnm//SPPPIIzz33HKtXr6Zbt268+eabHD58mG+//ZaWLVsC0LlzZ+d7Z8+ezdSpU5kwYYLzGM2ZM4eHH35YgUVEzqy0CI7sgsM7IPMnM5hk/gS/7wNO06PetDW0OQ9anwfh0bVYbNU0ysBSn1x22WUsXrzYZV3ZLzsw58Z544036N27Nx06dOC55547ZR8XXHCBS69ObGws8+fPx263VzhJ1ueff05iYiI7duwgJyeH0tJSCgsLyc/PP+3ke5GRkc6QABAWFua8g/fu3bvJz8/niiuucHlPcXExffv2BWD79u3ExMS4bD/bPDxe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+only5cTHh7OypUrGT58OFu3bqVLly4V1nbjjTfi7+/PJ598QmBgIC+99BJDhw7l559/pnXr1rzyyiuMGjWKYcOG0a1bN2655Rbuvfdel1Nvu3fv5q233uK///0vOTk53H777UyePJk33nijws/My8sjISGB3r17k5uby4wZM7j22mvZvHkz1jMMEHzssceYP38+rVu35k9/+hO33XYba9euBeCrr75i/PjxLFy4kMGDB7Nnzx4mTZoEwMyZM3E4HFx33XWEhISwfv16srOzmTJlyhn/3G688Ubuu+8+Vq9e7fy+ZT+DH3/8MQC5ublcddVVPPHEE/j6+vLaa68xYsQIdu7cSfv27Z37mjdvHjNmzGDmzJkVfpbD4aBdu3a8/fbbtGrVim+++YZJkyYRFhbGTTfd5Gy3evVqwsLCWL16Nbt372b06NFER0dz5513AjB+/HhSUlJYuHAhffr0Ye/evc5AkpWVxeWXX84dd9zBc889R0FBAY888gg33XQT//vf/854LOQssg9A6jrYv958ztgGhmvQxeZrznXStn/5Q1fsyLkyGoDs7GwDMLKzs0/ZVlBQYPz0009GQUFB+cqiXMOYGeCZR1Fupb7T+vXrDcB49913z9hu7969BmB8//33znW///67ARirV682DMMwVq9ebQDG559/7myTmJhoAMaePXuc6+666y4jPj7e+bpDhw7Gc8895/J5ffr0MWbOnOl8DRgrV648bX3PPPOM0b9/f+frmTNnGn369Dml3Yn7yczMNLy8vIwvv/zSuT02NtZ45JFHDMMwjF9//dWw2WzGwYMHXfYxdOhQY9q0aRXW8dVXXxkBAQFGYWGhy/pOnToZL730kvP15MmTja5duxo333yz0atXL5f2M2fONGw2m3HgwAHnuk8++cSwWq1GWlqaYRiGMWHCBGPkyJGnPR6HDx82AGPr1q2GYZz651fRn9VHH31kAM6f4aFDhxpPPvmky35ff/11IywszDAMw/j0008NLy8vl+PzySefnPXPauTIkcZtt93mfP3SSy8Z4eHhht1uP+17zj//fOP55593vu7QoYMxatQolzYV/Yye7J577jGuv/565+sJEyYYHTp0MEpLS53rbrzxRmP06NGGYRjGzp07DcBYtWpVhfubM2eOMWzYMJd1+/fvNwBj586dp7Sv8O8JMQx7qWGk/WAY6182jLcnGsb8HhX/vfZsT8N453az3YGNhlFS5OnKpZ440+/vkzXOHpZ6wDBOHox27nr37u1cDgkJcZ62OXHdhg0bzukzVqxYwcKFC9mzZw+5ubmUlpYSEOBeN2/r1q0ZNmwYb7zxBoMHD2bv3r2kpKTw0ksvAbB161bsdjtdu3Z1eV9RURGtWrWqcJ9btmwhNzf3lO0FBQUup2jmzZtHz549efvtt9m4cSO+vr4u7du3b0/btm2dr2NjY3E4HOzcubPCcRq7du1ixowZrF+/niNHjjhPuaSmptKzZ8/THoMT/6zCwsIAyMzMpH379mzZsoW1a9fyxBNPONvY7XYKCwvJz89n+/btREREEB4e7lLn2YwbN44777yTF198EV9fX9544w3GjBnj7AnKzc1l1qxZfPTRR6SlpVFaWkpBQQGpqaku+xkwYMBZP2vRokW88sorpKamUlBQQHFx8SlXEJ1//vnYbOU3lAsLC2Pr1q0AbN68GZvNxpAhQyrc/5YtW1i9ejXNmjU7ZduePXtO+dmR40oKzLEnqSnmY/+GU+c8sdjMqevbXwARMeZzQHjF+xOpRo0zsHg3gUcPee6zK6FLly5YLJazDqwt+2VyYsA58Ty/y0d7ezuXLRaLy+uydSeOYbBaracEp9PtGyAlJYVx48Yxe/Zs4uPjCQwMZPny5cyfP/+M36Ei48aN489//jPPP/88b775Jr169aJXr16A+YvTZrOxceNGl19oQIW/oMreExYWVuE4lxNPr+3Zs4dDhw7hcDjYt2+f8zOrasSIEXTo0IGlS5c6x4j07NmT4uLiM77v5D8rwPlnk5uby+zZs7nuuutOeZ+fX9WvphgxYgSGYfDRRx8xcOBAvvrqK5577jnn9oceeohVq1Yxb948OnfujL+/PzfccMMp36WiU5gnWr58OQ899BDz588nNjaW5s2b88wzz7B+/XqXdmf6+fT39z/jZ+Tm5jJixAieeuqpU7aVBUDBvCNx6jr49Rvz+dD34Djp/3GfZhAxCNrHmgGlbX/wrfj/M5Ga1DgDi8UCPmf+S9XTWrZsSXx8PIsWLeLPf/7zKb8EsrKyCAoKonXr1oB5WXDfvn0BTrlkuKpat25NWlqa83VOTg579+49bftvvvmGDh068NhjjznX/frrry5tfHx8sNvtZ/3skSNHMmnSJJKSknjzzTcZP368c1vfvn2x2+1kZmY6x7ScTb9+/UhPT8fLy4vIyMgK2xQXF/PHP/6R0aNH061bN+644w62bt1KmzZtnG1SU1M5dOiQs/di3bp1WK1WunXrdsr+jh49ys6dO1m6dKmzzq+//rpS9Z7tu+zcuZPOnTtXuP28885j//79pKWlOX85lw3SPhM/Pz+uu+463njjDXbv3k23bt3o16+fc/vatWu59dZbufbaawEzFOzbt8/t+teuXcuFF17I5MmTnetO7OWqjF69euFwOPjiiy+Ii4s7ZXu/fv34v//7PyIjI/Hyapx/zVXoWAakfmMGlF+/MW8GePKlxc1CzHDS4UKz96TN+ZrzROoE/RTWYYsWLeKiiy5i0KBB/O1vf6N3796UlpayatUqFi9ezPbt2/H39+eCCy5g7ty5REVFkZmZyV//+tdq+fzLL7+cZcuWMWLECIKCgpgxY8YpPRon6tKlC6mpqSxfvpyBAwfy0UcfsXLlSpc2kZGR7N27l82bN9OuXTuaN29+ymkXMP+VPmrUKKZPn8727dsZO3asc1vXrl0ZN24c48ePZ/78+fTt25fDhw+TnJxM7969+cMf/nDK/uLi4oiNjWXUqFE8/fTTdO3alUOHDvHRRx9x7bXXMmDAAB577DGys7NZuHAhzZo14+OPP+a2227jww8/dO7Hz8+PCRMmMG/ePHJycvjzn//MTTfdVOHpoBYtWtCqVStefvllwsLCSE1NZerUqZU69mcyY8YMrr76atq3b88NN9yA1Wply5YtbNu2jccff5y4uDi6du3KhAkTeOaZZ8jJyXEJkWcybtw4rr76an788Uf++Mc/umzr0qUL7777LiNGjMBisTB9+vRTriqqjC5duvDaa6/x6aefEhUVxeuvv863335LVFRUpfcRGRnJhAkTuO2225yDbn/99VcyMzO56aabuOeee1i6dCljx47l4YcfpmXLluzevZvly5fzj3/844w/xw1KVurxcLLWfD66+9Q2rbpAh1hofzygtIjU4Fipk3RZcx3WsWNHNm3axGWXXcaDDz5Iz549ueKKK0hOTmbx4sXOdq+88gqlpaX079+fKVOm8Pjjj1fL50+bNo0hQ4Zw9dVX84c//IFRo0bRqVOn07a/5ppreOCBB7j33nuJjo7mm2++Yfr06S5trr/+eoYPH85ll11G69at+c9//nPa/Y0bN44t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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Set up PCA object with the desired number of components\n",
        "\n",
        "pca = PCA(n_components=50)\n",
        "# fit transform one_hot_overview encodings\n",
        "labels_pca = pca.fit_transform(X)\n",
        "# get explained variance ratio from object, store it in a list\n",
        "powers = pca.explained_variance_ratio_ = pca.explained_variance_ratio_\n",
        "plt.plot(powers, label=\"Explained variance\")\n",
        "plt.plot([np.sum(powers[:i]) for i in range(len(powers)-1)], label=\"Cumulative explained variance\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# set up y label, x label, title\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8b36c9b2",
      "metadata": {
        "id": "8b36c9b2"
      },
      "source": [
        "**Q3.5** How many principal components do you need in order to explain 80% of the total variance in the data?\n",
        "\n",
        "Note: don't just estimate it by eye, write some code to compute it for you."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "95c44b2d",
      "metadata": {
        "id": "95c44b2d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3fa145e2-b7b6-4993-de37-f89d8abdc05d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of components needed for 80% variance: 1226\n"
          ]
        }
      ],
      "source": [
        "# your code answer here\n",
        "n_components_80 = np.argmax(cumulative_variance >= 0.80) + 1\n",
        "print(f\"Number of components needed for 80% variance: {n_components_80}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b608db91",
      "metadata": {
        "id": "b608db91"
      },
      "source": [
        "*Your text answer here*"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ee3b5c33",
      "metadata": {
        "id": "ee3b5c33"
      },
      "source": [
        "**Q3.6** Using the number of dimensions you found in Q3.5, fit and transform your overview encodings using PCA and add it to a new column called `overview_pca` in the dataframe."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "8a6eb40b",
      "metadata": {
        "id": "8a6eb40b"
      },
      "outputs": [],
      "source": [
        "n_dims = 1226\n",
        "pca = PCA(n_components=n_dims)\n",
        "labels_pca = pca.fit_transform(np.stack(df['one_hot_overview'].values))\n",
        "df[\"overview_pca\"] = list(labels_pca)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "309d3256",
      "metadata": {
        "id": "309d3256"
      },
      "source": [
        "# Q4 K-Means Clustering\n",
        "\n",
        "**Q4.1** Cluster the movies based on the features that were extracted via PCA in the last step. Set $K=20$. Add the predicted cluster into the dataframe as a new column called `cluster_kmeans`. Print out the elements of cluster number 0 from the dataframe."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "f5f5781e",
      "metadata": {
        "id": "f5f5781e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4bafd9cf-5e39-4913-969d-acb586084708"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of movies in cluster 0: 317\n",
            "\n",
            "Sample movies from cluster 0:\n",
            "                                              title  \\\n",
            "17      Pirates of the Caribbean: On Stranger Tides   \n",
            "52                   Transformers: Dark of the Moon   \n",
            "60                                A Christmas Carol   \n",
            "113       Harry Potter and the Order of the Phoenix   \n",
            "121  Night at the Museum: Battle of the Smithsonian   \n",
            "129                                            Thor   \n",
            "140                                White House Down   \n",
            "141                                 Mars Needs Moms   \n",
            "152                                 Kung Fu Panda 3   \n",
            "155                          Fun with Dick and Jane   \n",
            "\n",
            "                                                genres  \n",
            "17   [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 28, \"...  \n",
            "52   [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 878, \"na...  \n",
            "60   [{\"id\": 16, \"name\": \"Animation\"}, {\"id\": 18, \"...  \n",
            "113  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...  \n",
            "121  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...  \n",
            "129  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...  \n",
            "140  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 18, \"nam...  \n",
            "141  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 16, \"...  \n",
            "152  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...  \n",
            "155                     [{\"id\": 35, \"name\": \"Comedy\"}]  \n"
          ]
        }
      ],
      "source": [
        "# import KMeans class\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Perform K-means clustering\n",
        "X_pca = np.stack(df['overview_pca'].values)\n",
        "kmeans = KMeans(n_clusters=20, random_state=42)\n",
        "# fit model\n",
        "...\n",
        "y_preds = kmeans.fit_predict(X_pca) # get predictions\n",
        "df[\"cluster_kmeans\"] = y_preds # set predictions\n",
        "\n",
        "# print out elements of cluster 0\n",
        "print(f\"Number of movies in cluster 0: {sum(df['cluster_kmeans'] == 0)}\")\n",
        "print(\"\\nSample movies from cluster 0:\")\n",
        "print(df[df['cluster_kmeans'] == 0][['title', 'genres']].head(10))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "34334c6c",
      "metadata": {
        "id": "34334c6c"
      },
      "source": [
        "**Q4.2** Does this clustering seem alright to you (based on your movie watching history)? Are there movies that go well together and movies that don't?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9f1d40cc",
      "metadata": {
        "id": "9f1d40cc"
      },
      "source": [
        "I would say yes since adventure and action usually goes together so I would assumme its doing a good job"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0407f9e4",
      "metadata": {
        "id": "0407f9e4"
      },
      "source": [
        "**Q4.3** Now, we'll figure out whether using the elbow method is right for this dataset. Plot a loss (using `kmeans.inertia_`) versus cluster size plot. Is there an elbow that you see clearly? What cluster size would you choose?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4984dcd9",
      "metadata": {
        "id": "4984dcd9"
      },
      "source": [
        "There is somewhat of an elbow, its a bit jaggedy but has the overall shape still there. I would personally use a K level of 10 since there seem to be diminishing marginal returns for most cases after this one."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "cb3a37ee",
      "metadata": {
        "id": "cb3a37ee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "ba33affe-df6b-4d6f-e5a0-6a7f8e1a1171"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "... # your code answer here\n",
        "wcss = []\n",
        "k_values = range(1, 21)\n",
        "for k in k_values:\n",
        "    kmeans = KMeans(n_clusters=k)\n",
        "    kmeans.fit(X_pca)\n",
        "    wcss.append(kmeans.inertia_)\n",
        "\n",
        "plt.plot(k_values, wcss, marker='o')\n",
        "plt.xlabel('Number of Clusters (K)')\n",
        "plt.ylabel('Within-Cluster Sum of Squares (WCSS)')\n",
        "plt.title('Elbow Method')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3e89e224",
      "metadata": {
        "id": "3e89e224"
      },
      "source": [
        "# Q5 Gaussian Mixture Models\n",
        "\n",
        "**Q5.1** As with the K-means above, cluster the movies based on the features that were extracted via PCA in a previous step. Set $K=20$. Add the predicted cluster into the dataframe as a new column called `cluster_gmm`. Print out the elements of a single cluster of your choice from the dataframe."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "86735028",
      "metadata": {
        "id": "86735028",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eb280d8f-1a5f-4d06-b12d-ebc5f5d6bb82"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of movies in cluster 8: 358\n",
            "\n",
            "Sample movies from cluster:\n",
            "                                                 title  \\\n",
            "2                                              Spectre   \n",
            "97                                       Shin Godzilla   \n",
            "118                                        Ratatouille   \n",
            "143                                                Pan   \n",
            "151                                            Beowulf   \n",
            "199  Pirates of the Caribbean: The Curse of the Bla...   \n",
            "206                                Clash of the Titans   \n",
            "236                                        Windtalkers   \n",
            "269                          The Princess and the Frog   \n",
            "270                                        The Martian   \n",
            "\n",
            "                                                genres  \n",
            "2    [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...  \n",
            "97   [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...  \n",
            "118  [{\"id\": 16, \"name\": \"Animation\"}, {\"id\": 35, \"...  \n",
            "143  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 10751...  \n",
            "151  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 28, \"...  \n",
            "199  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...  \n",
            "206  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...  \n",
            "236  [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 28, \"name...  \n",
            "269  [{\"id\": 10749, \"name\": \"Romance\"}, {\"id\": 1075...  \n",
            "270  [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 12, \"name...  \n"
          ]
        }
      ],
      "source": [
        "# Your code answer here\n",
        "from sklearn.mixture import GaussianMixture\n",
        "X_pca = np.stack(df['overview_pca'].values)\n",
        "gmm = GaussianMixture(n_components=20, random_state=42)\n",
        "df[\"cluster_gmm\"] = gmm.fit_predict(X_pca)\n",
        "inspect_cluster = 8\n",
        "cluster_movies = df[df['cluster_gmm'] == inspect_cluster][['title', 'genres']]\n",
        "print(f\"Number of movies in cluster {inspect_cluster}: {len(cluster_movies)}\")\n",
        "print(\"\\nSample movies from cluster:\")\n",
        "print(cluster_movies.head(10))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "95ed02d9",
      "metadata": {
        "id": "95ed02d9"
      },
      "source": [
        "**Q4.2** Does this clustering seem alright to you (based on your movie watching history)? Are there movies that go well together and movies that don't? How does this compare to K-Means Clustering?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c62e20dd",
      "metadata": {
        "id": "c62e20dd"
      },
      "source": [
        "Based on the movies, it seems to be a bit off. The genres a bit strange together ( for example action animation romance and drama?). This means that K-means might be more suited."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3b0064a1",
      "metadata": {
        "id": "3b0064a1"
      },
      "source": [
        "**Q4.3** Let's check out the size of the clusters. Create a double bar plot (**as you did in the last assignment**) showing the different sizes of the clusters.\n",
        "\n",
        "*Hint: you may want to consider `df.value_counts()` if you're unfamiliar.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "id": "e775ad4f",
      "metadata": {
        "id": "e775ad4f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "outputId": "0cd5cff0-014c-4791-f1c4-066001670c04"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7e3485dec890>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Create an array for the x-axis positions\n",
        "kmeans_counts = df['cluster_kmeans'].value_counts().sort_index()\n",
        "gmm_counts = df['cluster_gmm'].value_counts().sort_index()\n",
        "# Plotting the bars\n",
        "fig, ax = plt.subplots(figsize=(14, 6))\n",
        "bar_width = 0.35\n",
        "x = np.arange(len(kmeans_counts))\n",
        "bar1 = ax.bar(x - bar_width/2, kmeans_counts, bar_width, label='K-means', color='blue')\n",
        "bar2 = ax.bar(x + bar_width/2, gmm_counts, bar_width, label='GMM', color='red')\n",
        "# Add labels, title, and legend\n",
        "\n",
        "ax.set_xlabel('Cluster ID')\n",
        "ax.set_ylabel('Number of Movies')\n",
        "ax.set_title('Cluster Size Comparison: K-means vs GMM (K=20)')\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels([f'Cluster {i}' for i in range(20)])\n",
        "ax.legend()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cfc124da",
      "metadata": {
        "id": "cfc124da"
      },
      "source": [
        "**Q4.4** Do you see a significant difference in the sizes of the clusters? Which is more uniform? Any thought on why?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9f538519",
      "metadata": {
        "id": "9f538519"
      },
      "source": [
        "They seem to be same, this is because while the cluster number is the same, there might be some differences in what is put in the cluster. We saw that K-means had better options in the cluster"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "aa60615d",
      "metadata": {
        "id": "aa60615d"
      },
      "source": [
        "# Q6: A very simple recommender system\n",
        "\n",
        "One useful thing that clustering is often used for (though at a much greater complexity) is in **recommender systems**. These are systems with users and items (movies, files, documents, etc.), where new items are shown to the user based on what they've previously interacted with, and possibly also on the behaviour of other users.\n",
        "\n",
        "**Q6.1** Assume your dentist has just watched the movie Avatar and asks you for a recommendation. Lucky for you, you just finished this assignment. Using the cluster indices of the movie Avatar for both the K-means and GMM methods, print out suggestions for new movies."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "id": "86a74f68",
      "metadata": {
        "id": "86a74f68",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cb9a0b05-d58c-4101-f0c9-39e45c06cc87"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'Avatar' is in K-means Cluster 14 and GMM Cluster 14\n",
            "\n",
            "=== K-means Recommendations (Cluster 14) ===\n",
            "                                     title                                                                                                                                  genres\n",
            "                       Conan the Barbarian                                          [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 28, \"name\": \"Action\"}]\n",
            "                       The Matrix Reloaded [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 28, \"name\": \"Action\"}, {\"id\": 53, \"name\": \"Thriller\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]\n",
            "                       The Christmas Bunny                                                                          [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 10751, \"name\": \"Family\"}]\n",
            "                             Hail, Caesar!                                            [{\"id\": 35, \"name\": \"Comedy\"}, {\"id\": 18, \"name\": \"Drama\"}, {\"id\": 9648, \"name\": \"Mystery\"}]\n",
            "                         Midnight in Paris                                         [{\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 35, \"name\": \"Comedy\"}, {\"id\": 10749, \"name\": \"Romance\"}]\n",
            "                          Midnight Special                                  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 18, \"name\": \"Drama\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]\n",
            "                        This Thing of Ours                                             [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 28, \"name\": \"Action\"}, {\"id\": 53, \"name\": \"Thriller\"}]\n",
            "                 To Write Love on Her Arms                                                                           [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 10402, \"name\": \"Music\"}]\n",
            "Sea Rex 3D: Journey to a Prehistoric World                                                                                                     [{\"id\": 99, \"name\": \"Documentary\"}]\n",
            "                              Modern Times                                                                             [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 35, \"name\": \"Comedy\"}]\n",
            "\n",
            "=== GMM Recommendations (Cluster 14) ===\n",
            "                                     title                                                                                                                                  genres\n",
            "                       Conan the Barbarian                                          [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 28, \"name\": \"Action\"}]\n",
            "                       The Matrix Reloaded [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 28, \"name\": \"Action\"}, {\"id\": 53, \"name\": \"Thriller\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]\n",
            "                       The Christmas Bunny                                                                          [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 10751, \"name\": \"Family\"}]\n",
            "                             Hail, Caesar!                                            [{\"id\": 35, \"name\": \"Comedy\"}, {\"id\": 18, \"name\": \"Drama\"}, {\"id\": 9648, \"name\": \"Mystery\"}]\n",
            "                         Midnight in Paris                                         [{\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 35, \"name\": \"Comedy\"}, {\"id\": 10749, \"name\": \"Romance\"}]\n",
            "                          Midnight Special                                  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 18, \"name\": \"Drama\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]\n",
            "                        This Thing of Ours                                             [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 28, \"name\": \"Action\"}, {\"id\": 53, \"name\": \"Thriller\"}]\n",
            "                 To Write Love on Her Arms                                                                           [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 10402, \"name\": \"Music\"}]\n",
            "Sea Rex 3D: Journey to a Prehistoric World                                                                                                     [{\"id\": 99, \"name\": \"Documentary\"}]\n",
            "                              Modern Times                                                                             [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 35, \"name\": \"Comedy\"}]\n"
          ]
        }
      ],
      "source": [
        "prev_watch = \"Avatar\"\n",
        "\n",
        "cluster_kmeans = df[df['title'] == prev_watch]['cluster_kmeans'].values[0]# find what cluster index Avatar falls into for k-means\n",
        "cluster_gmm = df[df['title'] == prev_watch]['cluster_gmm'].values[0] # find what cluster index Avatar falls into for gmm\n",
        "\n",
        "print(f\"'{prev_watch}' is in K-means Cluster {cluster_kmeans} and GMM Cluster {cluster_gmm}\\n\")\n",
        "# print out similar movies\n",
        "\n",
        "#For kmeans\n",
        "print(f\"=== K-means Recommendations (Cluster {cluster_kmeans}) ===\")\n",
        "kmeans_recs = df[df['cluster_kmeans'] == cluster_kmeans].sample(10, random_state=42)\n",
        "print(kmeans_recs[['title', 'genres']].to_string(index=False))\n",
        "\n",
        "#For GMM\n",
        "print(f\"\\n=== GMM Recommendations (Cluster {cluster_kmeans}) ===\")\n",
        "gmm_recs = df[df['cluster_gmm'] == cluster_kmeans].sample(10, random_state=42)\n",
        "print(gmm_recs[['title', 'genres']].to_string(index=False))"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bdhF-9tmKjST"
      },
      "id": "bdhF-9tmKjST",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "4ecec1ff",
      "metadata": {
        "id": "4ecec1ff"
      },
      "source": [
        "**Q6.2** Are any of the two recommender systems any good? Would you use them if your real dentist asks for a movie suggestion?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "aae96b8a",
      "metadata": {
        "id": "aae96b8a"
      },
      "source": [
        "The two recommender systems are the same but the movie suggestions could be better. I think its a good first step in the right direction but the recommendations could be better"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "92b84753",
      "metadata": {
        "id": "92b84753"
      },
      "source": [
        "**Q6.3** How would you try making the recommender systems better?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "40d3f6dd",
      "metadata": {
        "id": "40d3f6dd"
      },
      "source": [
        "You could train the model on more data or add more clusters to mke the genres more niche and closer to other related movies."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7df2d34a",
      "metadata": {
        "id": "7df2d34a"
      },
      "source": [
        "**Q6.4** Say your dentist likes the movies you suggested and has watched a few more since you met him last. How would you incorporate this fact (recommendation based on multiple movies) into your suggestions?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b3549de4",
      "metadata": {
        "id": "b3549de4"
      },
      "source": [
        "You could see which movies he has watched and plug them into the model to find which clusters they fall into, then using this you could recommend more movies in those clusters. Also you could probably do some cross work with multiple clusters to make a new cluster that is more directed towards the dentists taste (something like a neural network would be good)."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f20b74ce",
      "metadata": {
        "id": "f20b74ce"
      },
      "source": [
        "**Q6.5** An alternative method for recommendations is to use your encoded movie-feature vectors (in this case your overview+PCA vector) in order to find out what movie may be most similar to the current one. In the case of K-Means and GMMs, \"similarity\" referred to Euclidean distance. However, in this exercise, we will use *cosine similarity*, which is another very common similarity measure, and is related to the angle between two vectors. It is defined as:\n",
        "\n",
        "$$sim(v_1, v_2)=\\frac{v_1\\cdot v_2}{||v_1||\\cdot||v_2||}$$\n",
        "\n",
        "Where $v_1$ and $v_2$ are vectors and the operator $||\\cdot||$ is the norm of the vector. The function ranges from $[-1,1]$ (where 1 means that the vectors point in the same direction).\n",
        "\n",
        "Define an appropriate function `cosine_sim`. Add a column called `cos_sim_to_avatar` in the df and print out the head of the df, sorted by the similarity. What movies would you recommend now? Is this better than the clustering methods?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "id": "cedf60f3",
      "metadata": {
        "id": "cedf60f3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bef3978e-c646-4085-ab41-fdc1cbd51f49"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 recommendations similar to 'Avatar':\n",
            "             title  cos_sim_to_avatar                                                                                                                       genres\n",
            "           Warlock           0.536441 [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 35, \"name\": \"Comedy\"}, {\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 27, \"name\": \"Horror\"}]\n",
            "            Zipper           0.482491                                                                [{\"id\": 53, \"name\": \"Thriller\"}, {\"id\": 18, \"name\": \"Drama\"}]\n",
            "Nomad: The Warrior           0.468462                                  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 36, \"name\": \"History\"}, {\"id\": 10752, \"name\": \"War\"}]\n",
            "             Dredd           0.455105                                                       [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]\n",
            "      Barry Lyndon           0.443154                                [{\"id\": 18, \"name\": \"Drama\"}, {\"id\": 10749, \"name\": \"Romance\"}, {\"id\": 10752, \"name\": \"War\"}]\n"
          ]
        }
      ],
      "source": [
        "from numpy.linalg import norm\n",
        "def cosine_sim(v1, v2):\n",
        "    return np.dot(v1, v2) / (norm(v1) * norm(v2))\n",
        "\n",
        "# get overview_pca encoding of previously watched film\n",
        "\n",
        "prev_watch_enc = df[df['title'] == prev_watch]['overview_pca'].values[0]\n",
        "\n",
        "sims = [] # set up place to store similarities\n",
        "for i, row in df.iterrows():\n",
        "    sim = cosine_sim(prev_watch_enc, row['overview_pca'])\n",
        "    sims.append(sim)\n",
        "\n",
        "df[\"cos_sim_to_avatar\"] = sims\n",
        "df = df.sort_values('cos_sim_to_avatar', ascending=False) # sort df\n",
        " # print to verify\n",
        "print(f\"Top 5 recommendations similar to '{prev_watch}':\")\n",
        "print(df[df['title'] != prev_watch][['title', 'cos_sim_to_avatar', 'genres']].head(5).to_string(index=False))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "40391e82",
      "metadata": {
        "id": "40391e82"
      },
      "source": [
        "Its performning better than before and its nice that we can see how similar some movies are to avatar, but the most similar movie \"Warlock\" has quite a low score (less than 0.6) which means our program can be improved by quite a bit. It is better than the two other methods because it can point us in the right direction of wether our code is working well or not"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a7b1e343",
      "metadata": {
        "id": "a7b1e343"
      },
      "source": [
        "# Q7 Unsupervised Learning as a Tool\n",
        "\n",
        "At the end of this brief forey into natural language processing, we will end with an interesting task: can a machine predict the genre of a movie based purely on the first 10 words of its overview?\n",
        "\n",
        "First, the following cell shuffles the dataset and splits it into a training and test set. The random seed and random state ensure that the train and test samples are the same for you all the time, and *probably* your classmates too. You can verify this by printing out the dataframes and checking it for yourself."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "id": "f5b1bde1",
      "metadata": {
        "id": "f5b1bde1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "85fc4fdb-32cb-4b99-c527-a7f2a81b7e06"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3765 942\n"
          ]
        }
      ],
      "source": [
        "np.random.seed(0)\n",
        "n_train = int(0.8*len(df))\n",
        "df_shuffle = df.sample(frac=1, random_state=42).reset_index(drop=True)\n",
        "df_train = df_shuffle[:n_train].reset_index(drop=True)\n",
        "df_test = df_shuffle[n_train:].reset_index(drop=True)\n",
        "print(len(df_train), len(df_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "92f9d534",
      "metadata": {
        "id": "92f9d534"
      },
      "source": [
        "## Train, test, evaluate\n",
        "\n",
        "Using a supervised learning method of your choice, try predicting the genre of a movie from the overview. The way you preprocess your data is up to you, and you can take inspiration from the above exercises (e.g. PCA on the one-hot encodings as input, one-hot label encodings as output). There are a number of hyperparameters you can choose depending on your selected method (number of words in your overview, number of dimensions, number of clusters, hyperparameters of your supervised model...), thus, make sure to perform hyperparameter optimization in some way (grid-search, fine-tuning, etc). Once you are happy with how your model is performing, **print out the train_score (accuracy$\\in[0,1]$), test_score (accuracy$\\in[0,1]$), mean training time (in seconds), and mean inference time (in seconds) of your model**.\n",
        "\n",
        "If you are already excited about neural networks, you may also choose to use that as your supervised method. The easiest way to do it is with sklearn's `MLPClassifier` module. The main hyperparameter you would need to tune is the architecture of your model -- how many hidden layers, and how large is each one. For this task, in order to get best performance, you do not necessarily need an MLP (multi-layer perceptron) but feel free to experiment.\n",
        "\n",
        "*Hint: the `train_and_eval` function from the last assignment should be of great help here*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "id": "e9ac379d",
      "metadata": {
        "id": "e9ac379d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "outputId": "320825ff-57f6-479b-eb07-dc9f7f52519c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'genre'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'genre'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-44-e3207fcfa8ba>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvectorizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"processed_overview\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mlabel_encoder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLabelEncoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabel_encoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"genre\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;31m#Using Random Forest\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mrf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'genre'"
          ]
        }
      ],
      "source": [
        "# your code here: feel free to add extra cells\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import accuracy_score\n",
        "def extract_first_n_words(text, n=10):\n",
        "    return \" \".join(text.split()[:n]) if isinstance(text, str) else \"\"\n",
        "df[\"processed_overview\"] = df[\"overview\"].apply(lambda x: extract_first_n_words(x, 10))\n",
        "vectorizer = TfidfVectorizer(max_features=500)  # Limiting features for better performance\n",
        "X = vectorizer.fit_transform(df[\"processed_overview\"])\n",
        "label_encoder = LabelEncoder()\n",
        "y = label_encoder.fit_transform(df[\"genre\"])\n",
        "#Using Random Forest\n",
        "rf = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)\n",
        "\n",
        "train_accuracy = accuracy_score(y_train, best_rf.predict(X_train))\n",
        "test_accuracy = accuracy_score(y_test, best_rf.predict(X_test))\n",
        "\n",
        "print(f\"Train Accuracy: {train_accuracy:.4f}\")\n",
        "print(f\"Test Accuracy: {test_accuracy:.4f}\")\n",
        "print(f\"Mean Training Time: {train_time:.4f} seconds\")\n",
        "print(f\"Mean Inference Time: {inference_time:.6f} seconds/sample\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5976997e",
      "metadata": {
        "id": "5976997e"
      },
      "source": [
        "Write a paragraph of ~150 words about how you went about selecting and tuning your model, and how you may want to make improvements to your model if you were to continue working on this. Plots are very good but not strictly necessary (i.e. try to add plots if you can)."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "54186a60",
      "metadata": {
        "id": "54186a60"
      },
      "source": [
        "Im not quite sure where I am going wrong with my code. I chose the random forest supervised model since it would be less computationally taxing when compared to something like grid search (I think this one would be the best if wouldnt take so long). I need to try to figure this code out but im not sure what I can do since I asked ChatGPT for some refinements and it was not helping much. I thought of using other models like the neural networks but we havent covered this one yet in class, but I would like to revise my model once we have learned this. I figured random forest made the most sense since I wanted to focus on accuracy first of the model, which is something that RF does best. In addition, we saw that the data may be a bit noisy so having this model can fix that issue and perform a robust analysis."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "14b50007",
      "metadata": {
        "id": "14b50007"
      },
      "source": [
        "# BONUS\n",
        "\n",
        "If you are happy with your score and wish to see how well it is doing with respect to other people (a sort of mini-competition), fill out the following form with the train_score (accuracy$\\in[0,1]$), test_score (accuracy$\\in[0,1]$), mean training time (in seconds), and mean inference time (in seconds) of your model, as well as what method you use. You can submit as many times before the deadline as you wish. Your final results will be correlated with your submission in order to validate your results (if we cannot validate them, they will be immediately disqualified).\n",
        "\n",
        "[FORM HERE](https://forms.gle/rXRtXScABH5oDLRWA)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.7"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}